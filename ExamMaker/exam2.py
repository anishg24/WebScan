#  Copyright (c) 2020. Anish Govind#  https://github.com/anishg24import osimport shutilfrom string import ascii_lowercaseimport cv2.aruco as arucoimport pyqrcodeng as qrfrom cv2 import imwritefrom fpdf import FPDF  # Consider switching over to Jinja Template + PDFKit# NOTE:# All these calculations were done via trial and error. If you decide to change constants predefined then end result# may not look the same!# GOLDEN EXPRESSION# self.bubble_coordinates[i].append((x, y, HALF_BUBBLE_SIZE / 2 + x + 0.25 * self.pdf.font_size - 0.3,#                                                    HALF_BUBBLE_SIZE / 2 + y + 0.75 * self.pdf.font_size - 0.1))# EXAMS_FOLDER = os.getcwd() + "/custom_exams/"EXAMS_FOLDER = "../custom_exams/"# TODO DELETE IN PRODUCTIONtry:    shutil.rmtree(os.path.join(os.getcwd(), "created_exams/") + "1")    shutil.rmtree(os.path.join(os.getcwd(), "created_exams/") + "markers")except FileNotFoundError:    passclass Exam(FPDF):    def __init__(self, name, num_questions, num_choices=4):        super().__init__("P", "mm", "A4")        if num_choices > 10:            return        if len(name) > 20:            return        self.directory = os.path.join(os.getcwd(), "created_exams/")        self.marker_directory = os.path.join(self.directory, "markers/")        if not os.path.exists(self.marker_directory):            try:                os.mkdir(self.directory)            except FileExistsError:                pass            os.mkdir(self.marker_directory)        self.name = name        self.num_questions = num_questions        self.num_choices = num_choices        self.bubble_size = 5        self.marker_size = 24        self.set_auto_page_break(True, 270)        self.page_count = 0        self._generate_markers()        self._generate_id()        self.add_page("P")        self._add_fields_to_paper()    def header(self):        self.image(f"{self.marker_directory}1.png", 10, 8)  # top left        self.image(f"{self.marker_directory}2.png", 186, 8)  # top right        self.image(f"{self.marker_directory}3.png", 10, 265)  # bottom left        self.image(f"{self.directory}{self.exam_id}/qr.png", 150, 235)  # bottom middle (was 235 before)    def _generate_markers(self):        aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)        li = [aruco.drawMarker(aruco_dict, i + 1, self.marker_size) for i in range(5)]        for i in range(len(li)):            imwrite(f"{self.marker_directory}{i + 1}.png", li[i])    def _generate_id(self):        self.exam_id = len(os.listdir(self.directory))        if not os.path.exists(self.directory + f"{self.exam_id}/"):            os.mkdir(self.directory + f"{self.exam_id}/")        self.ID = (self.exam_id, self.num_questions, self.num_choices,                   self.page_count)  # QR Code effectively gives all the data across scripts        self.qr_code = qr.create(str(self.ID))        self.qr_code.png(self.directory + f"{self.exam_id}/qr.png", scale=3)    def _add_fields_to_paper(self):        x = self.w * 0.33        def title(y, text):            self.set_font("Arial", size=32)            self.set_text_color(0, 0, 0)            self.text(x, y, text)        def field(y, text, subtitle=None):            self.set_font("Arial", size=16)            self.set_text_color(0, 0, 0)            self.text(x, y, text)            if subtitle:                self.set_font("Arial", size=8)                self.set_text_color(125, 125, 125)                self.text(x, y + 3, subtitle)        title(20, self.name)        field(30, f"Name: {'_' * 16}")        field(40, f"Date: __/__/__")        field(50, f"Period: __")        field(60, f"Class: {'_' * 16}", "(Optional)")        field(70, f"Teacher: {'_' * 16}", "(Optional)")        field(80, f"Score: __/__", "(Score to be filled by administrator)")        self.set_font("Courier", )    def _calculate_questions(self, with_header=False):        pass    def _get_text_coordinates(self, coordinates):        x, y = coordinates        tx = self.bubble_size / 4 + x + 0.25 * self.font_size - 0.3        ty = self.bubble_size / 4 + y + 0.75 * self.font_size - 0.1        return tx, ty    def _create_bubble(self, coordinates, text):        initial_width = self.line_width        self.set_line_width(.2)        x, y = coordinates        tx, ty = self._get_text_coordinates(coordinates)        self.ellipse(x, y, self.bubble_size, self.bubble_size)        self.set_text_color(125, 125, 125)        self.text(tx, ty, text)        self.set_line_width(initial_width)    def _add_question(self, coordinates, question_offset=0):        bubble_letters = ascii_lowercase[:self.num_choices]        x, y = coordinates        for num in range(len(coordinates)):            if not len(coordinates[num]) == self.num_choices:                break            qx, qy = self._get_text_coordinates(coordinates[num][0])            self.set_text_color(0, 0, 0)            question_num = f"{num + 1 + question_offset}."            self.text(qx - len(question_num) - 5, qy, question_num)            for i in range(len(coordinates[num])):                self._create_bubble(coordinates[num][i], bubble_letters[i])    # def _add_uid_to_paper(self):    #     X = 18    #     Y = 12    #     self.set_line_width(1)    #     self._create_bubble_coordinates(X, Y, 10, 5)  # Rows and columns to be swapped    #     for row in range(len(self.bubble_coordinates)):    #         for col in range(len(self.bubble_coordinates[row])):    #             self._create_bubble(self.bubble_coordinates[row][col], str(row))    #    #     for sx, sy in self.bubble_coordinates[0]:    #         self.set_line_width(.2)    #         self.rect(sx, sy - 10, self.bubble_size, 8.5)    #    #     initial_uid_bubbles = self.bubble_coordinates[0]    #     ex, ey = self.bubble_coordinates[-1][0]    #     uid_divider = initial_uid_bubbles[0][1] - 0.75    #     self.line(initial_uid_bubbles[0][0] - 2, uid_divider, initial_uid_bubbles[-1][0] + self.bubble_size + 2,    #                   uid_divider)    #     self.set_line_width(1)    #     self.rect(23, 8, 37, ey - 2)    #     # self.pdf.rect(20, 8, 164, ey - 1)    #     self.box_end_coords = (ex-2, ey - 1)    def save_pdf(self):        super().output(f"{self.directory}{self.exam_id}/paper.pdf")    def get_directory(self):        return self.directorya = Exam("Unit 10 MCQ", 380, 4)# a._create_bubble((a.h/2, a.w/2), "a")a.save_pdf()print("CREATED TEST")